type User {
    id: ID! @unique
    createdAt: DateTime!
    updatedAt: DateTime!
    username: String! @unique
    posts: [Post!]! @relation(name: "OwnerOfPost")
    groups: [Group!]! @relation(name: "MemberOfGroup")
    likedPosts: [Post!]! @relation(name: "LikedPosts")
    sharedPosts: [Post!]! @relation(name: "SharedPosts")
    likedComments: [Comment!]! @relation(name: "LikedComments")
}

type Group {
    id: ID! @unique
    createdAt: DateTime!
    updatedAt: DateTime!
    name: String! @unique
    description: String
    members: [User!]! @relation(name: "MemberOfGroup")
    posts: [Post!]!
}

type Post {
    id: ID! @unique
    createdAt: DateTime!
    updatedAt: DateTime!
    user: User! @relation(name: "OwnerOfPost")
    group: Group!
    tags: String
    content: String!
    likedBy: [User!]! @relation(name: "LikedPosts")
    sharedBy: [User!]! @relation(name: "SharedPosts")
    comments: [Comment!]! @relation(name: "CommentsOnPost")
}

type Comment {
    id: ID! @unique
    createdAt: DateTime!
    updatedAt: DateTime!
    user: User! @relation(name: "OwnerOfComment")
    post: Post! @relation(name: "CommentsOnPost")
    parentComment: Comment # Can have a parent comment if it is replying to a comment
    content: String!
    likedBy: [User!]! @relation(name: "LikedComments")
}