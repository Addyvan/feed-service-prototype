type AggregateComment {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Comment {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  post: Post!
  parentComment: Comment
  content: String!
  likedBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  user: UserCreateOneInput!
  post: PostCreateOneWithoutCommentsInput!
  parentComment: CommentCreateOneInput
  content: String!
  likedBy: UserCreateManyWithoutLikedCommentsInput
}

input CommentCreateManyWithoutLikedByInput {
  create: [CommentCreateWithoutLikedByInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateOneInput {
  create: CommentCreateInput
  connect: CommentWhereUniqueInput
}

input CommentCreateWithoutLikedByInput {
  user: UserCreateOneInput!
  post: PostCreateOneWithoutCommentsInput!
  parentComment: CommentCreateOneInput
  content: String!
}

input CommentCreateWithoutPostInput {
  user: UserCreateOneInput!
  parentComment: CommentCreateOneInput
  content: String!
  likedBy: UserCreateManyWithoutLikedCommentsInput
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  content_ASC
  content_DESC
}

type CommentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateDataInput {
  user: UserUpdateOneRequiredInput
  post: PostUpdateOneRequiredWithoutCommentsInput
  parentComment: CommentUpdateOneInput
  content: String
  likedBy: UserUpdateManyWithoutLikedCommentsInput
}

input CommentUpdateInput {
  user: UserUpdateOneRequiredInput
  post: PostUpdateOneRequiredWithoutCommentsInput
  parentComment: CommentUpdateOneInput
  content: String
  likedBy: UserUpdateManyWithoutLikedCommentsInput
}

input CommentUpdateManyMutationInput {
  content: String
}

input CommentUpdateManyWithoutLikedByInput {
  create: [CommentCreateWithoutLikedByInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutLikedByInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutLikedByInput!]
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
}

input CommentUpdateOneInput {
  create: CommentCreateInput
  update: CommentUpdateDataInput
  upsert: CommentUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CommentWhereUniqueInput
}

input CommentUpdateWithoutLikedByDataInput {
  user: UserUpdateOneRequiredInput
  post: PostUpdateOneRequiredWithoutCommentsInput
  parentComment: CommentUpdateOneInput
  content: String
}

input CommentUpdateWithoutPostDataInput {
  user: UserUpdateOneRequiredInput
  parentComment: CommentUpdateOneInput
  content: String
  likedBy: UserUpdateManyWithoutLikedCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutLikedByInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutLikedByDataInput!
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostDataInput!
}

input CommentUpsertNestedInput {
  update: CommentUpdateDataInput!
  create: CommentCreateInput!
}

input CommentUpsertWithWhereUniqueWithoutLikedByInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutLikedByDataInput!
  create: CommentCreateWithoutLikedByInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostDataInput!
  create: CommentCreateWithoutPostInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  user: UserWhereInput
  post: PostWhereInput
  parentComment: CommentWhereInput
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  likedBy_every: UserWhereInput
  likedBy_some: UserWhereInput
  likedBy_none: UserWhereInput
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

type Group {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type GroupConnection {
  pageInfo: PageInfo!
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  name: String!
  description: String
  members: UserCreateManyWithoutGroupsInput
  posts: PostCreateManyWithoutGroupInput
}

input GroupCreateManyWithoutMembersInput {
  create: [GroupCreateWithoutMembersInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateOneWithoutPostsInput {
  create: GroupCreateWithoutPostsInput
  connect: GroupWhereUniqueInput
}

input GroupCreateWithoutMembersInput {
  name: String!
  description: String
  posts: PostCreateManyWithoutGroupInput
}

input GroupCreateWithoutPostsInput {
  name: String!
  description: String
  members: UserCreateManyWithoutGroupsInput
}

type GroupEdge {
  node: Group!
  cursor: String!
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type GroupPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
  AND: [GroupSubscriptionWhereInput!]
  OR: [GroupSubscriptionWhereInput!]
  NOT: [GroupSubscriptionWhereInput!]
}

input GroupUpdateInput {
  name: String
  description: String
  members: UserUpdateManyWithoutGroupsInput
  posts: PostUpdateManyWithoutGroupInput
}

input GroupUpdateManyMutationInput {
  name: String
  description: String
}

input GroupUpdateManyWithoutMembersInput {
  create: [GroupCreateWithoutMembersInput!]
  delete: [GroupWhereUniqueInput!]
  connect: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutMembersInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutMembersInput!]
}

input GroupUpdateOneRequiredWithoutPostsInput {
  create: GroupCreateWithoutPostsInput
  update: GroupUpdateWithoutPostsDataInput
  upsert: GroupUpsertWithoutPostsInput
  connect: GroupWhereUniqueInput
}

input GroupUpdateWithoutMembersDataInput {
  name: String
  description: String
  posts: PostUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutPostsDataInput {
  name: String
  description: String
  members: UserUpdateManyWithoutGroupsInput
}

input GroupUpdateWithWhereUniqueWithoutMembersInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutMembersDataInput!
}

input GroupUpsertWithoutPostsInput {
  update: GroupUpdateWithoutPostsDataInput!
  create: GroupCreateWithoutPostsInput!
}

input GroupUpsertWithWhereUniqueWithoutMembersInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutMembersDataInput!
  create: GroupCreateWithoutMembersInput!
}

input GroupWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
}

input GroupWhereUniqueInput {
  id: ID
  name: String
}

scalar Long

type Mutation {
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createGroup(data: GroupCreateInput!): Group!
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  updateManyGroups(data: GroupUpdateManyMutationInput!, where: GroupWhereInput): BatchPayload!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteManyGroups(where: GroupWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  group: Group!
  tags: String
  content: String!
  likedBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  sharedBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  user: UserCreateOneWithoutPostsInput!
  group: GroupCreateOneWithoutPostsInput!
  tags: String
  content: String!
  likedBy: UserCreateManyWithoutLikedPostsInput
  sharedBy: UserCreateManyWithoutSharedPostsInput
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateManyWithoutGroupInput {
  create: [PostCreateWithoutGroupInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutLikedByInput {
  create: [PostCreateWithoutLikedByInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutSharedByInput {
  create: [PostCreateWithoutSharedByInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutCommentsInput {
  user: UserCreateOneWithoutPostsInput!
  group: GroupCreateOneWithoutPostsInput!
  tags: String
  content: String!
  likedBy: UserCreateManyWithoutLikedPostsInput
  sharedBy: UserCreateManyWithoutSharedPostsInput
}

input PostCreateWithoutGroupInput {
  user: UserCreateOneWithoutPostsInput!
  tags: String
  content: String!
  likedBy: UserCreateManyWithoutLikedPostsInput
  sharedBy: UserCreateManyWithoutSharedPostsInput
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateWithoutLikedByInput {
  user: UserCreateOneWithoutPostsInput!
  group: GroupCreateOneWithoutPostsInput!
  tags: String
  content: String!
  sharedBy: UserCreateManyWithoutSharedPostsInput
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateWithoutSharedByInput {
  user: UserCreateOneWithoutPostsInput!
  group: GroupCreateOneWithoutPostsInput!
  tags: String
  content: String!
  likedBy: UserCreateManyWithoutLikedPostsInput
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateWithoutUserInput {
  group: GroupCreateOneWithoutPostsInput!
  tags: String
  content: String!
  likedBy: UserCreateManyWithoutLikedPostsInput
  sharedBy: UserCreateManyWithoutSharedPostsInput
  comments: CommentCreateManyWithoutPostInput
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  tags_ASC
  tags_DESC
  content_ASC
  content_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  tags: String
  content: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  user: UserUpdateOneRequiredWithoutPostsInput
  group: GroupUpdateOneRequiredWithoutPostsInput
  tags: String
  content: String
  likedBy: UserUpdateManyWithoutLikedPostsInput
  sharedBy: UserUpdateManyWithoutSharedPostsInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateManyMutationInput {
  tags: String
  content: String
}

input PostUpdateManyWithoutGroupInput {
  create: [PostCreateWithoutGroupInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutGroupInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutGroupInput!]
}

input PostUpdateManyWithoutLikedByInput {
  create: [PostCreateWithoutLikedByInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutLikedByInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutLikedByInput!]
}

input PostUpdateManyWithoutSharedByInput {
  create: [PostCreateWithoutSharedByInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutSharedByInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutSharedByInput!]
}

input PostUpdateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUserInput!]
}

input PostUpdateOneRequiredWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostUpdateWithoutCommentsDataInput {
  user: UserUpdateOneRequiredWithoutPostsInput
  group: GroupUpdateOneRequiredWithoutPostsInput
  tags: String
  content: String
  likedBy: UserUpdateManyWithoutLikedPostsInput
  sharedBy: UserUpdateManyWithoutSharedPostsInput
}

input PostUpdateWithoutGroupDataInput {
  user: UserUpdateOneRequiredWithoutPostsInput
  tags: String
  content: String
  likedBy: UserUpdateManyWithoutLikedPostsInput
  sharedBy: UserUpdateManyWithoutSharedPostsInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateWithoutLikedByDataInput {
  user: UserUpdateOneRequiredWithoutPostsInput
  group: GroupUpdateOneRequiredWithoutPostsInput
  tags: String
  content: String
  sharedBy: UserUpdateManyWithoutSharedPostsInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateWithoutSharedByDataInput {
  user: UserUpdateOneRequiredWithoutPostsInput
  group: GroupUpdateOneRequiredWithoutPostsInput
  tags: String
  content: String
  likedBy: UserUpdateManyWithoutLikedPostsInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateWithoutUserDataInput {
  group: GroupUpdateOneRequiredWithoutPostsInput
  tags: String
  content: String
  likedBy: UserUpdateManyWithoutLikedPostsInput
  sharedBy: UserUpdateManyWithoutSharedPostsInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateWithWhereUniqueWithoutGroupInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutGroupDataInput!
}

input PostUpdateWithWhereUniqueWithoutLikedByInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutLikedByDataInput!
}

input PostUpdateWithWhereUniqueWithoutSharedByInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutSharedByDataInput!
}

input PostUpdateWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutUserDataInput!
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithWhereUniqueWithoutGroupInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutGroupDataInput!
  create: PostCreateWithoutGroupInput!
}

input PostUpsertWithWhereUniqueWithoutLikedByInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutLikedByDataInput!
  create: PostCreateWithoutLikedByInput!
}

input PostUpsertWithWhereUniqueWithoutSharedByInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutSharedByDataInput!
  create: PostCreateWithoutSharedByInput!
}

input PostUpsertWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutUserDataInput!
  create: PostCreateWithoutUserInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  user: UserWhereInput
  group: GroupWhereInput
  tags: String
  tags_not: String
  tags_in: [String!]
  tags_not_in: [String!]
  tags_lt: String
  tags_lte: String
  tags_gt: String
  tags_gte: String
  tags_contains: String
  tags_not_contains: String
  tags_starts_with: String
  tags_not_starts_with: String
  tags_ends_with: String
  tags_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  likedBy_every: UserWhereInput
  likedBy_some: UserWhereInput
  likedBy_none: UserWhereInput
  sharedBy_every: UserWhereInput
  sharedBy_some: UserWhereInput
  sharedBy_none: UserWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  group(where: GroupWhereUniqueInput!): Group
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
  likedPosts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  sharedPosts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  likedComments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String!
  posts: PostCreateManyWithoutUserInput
  groups: GroupCreateManyWithoutMembersInput
  likedPosts: PostCreateManyWithoutLikedByInput
  sharedPosts: PostCreateManyWithoutSharedByInput
  likedComments: CommentCreateManyWithoutLikedByInput
}

input UserCreateManyWithoutGroupsInput {
  create: [UserCreateWithoutGroupsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutLikedCommentsInput {
  create: [UserCreateWithoutLikedCommentsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutLikedPostsInput {
  create: [UserCreateWithoutLikedPostsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutSharedPostsInput {
  create: [UserCreateWithoutSharedPostsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutGroupsInput {
  username: String!
  posts: PostCreateManyWithoutUserInput
  likedPosts: PostCreateManyWithoutLikedByInput
  sharedPosts: PostCreateManyWithoutSharedByInput
  likedComments: CommentCreateManyWithoutLikedByInput
}

input UserCreateWithoutLikedCommentsInput {
  username: String!
  posts: PostCreateManyWithoutUserInput
  groups: GroupCreateManyWithoutMembersInput
  likedPosts: PostCreateManyWithoutLikedByInput
  sharedPosts: PostCreateManyWithoutSharedByInput
}

input UserCreateWithoutLikedPostsInput {
  username: String!
  posts: PostCreateManyWithoutUserInput
  groups: GroupCreateManyWithoutMembersInput
  sharedPosts: PostCreateManyWithoutSharedByInput
  likedComments: CommentCreateManyWithoutLikedByInput
}

input UserCreateWithoutPostsInput {
  username: String!
  groups: GroupCreateManyWithoutMembersInput
  likedPosts: PostCreateManyWithoutLikedByInput
  sharedPosts: PostCreateManyWithoutSharedByInput
  likedComments: CommentCreateManyWithoutLikedByInput
}

input UserCreateWithoutSharedPostsInput {
  username: String!
  posts: PostCreateManyWithoutUserInput
  groups: GroupCreateManyWithoutMembersInput
  likedPosts: PostCreateManyWithoutLikedByInput
  likedComments: CommentCreateManyWithoutLikedByInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  username_ASC
  username_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  username: String
  posts: PostUpdateManyWithoutUserInput
  groups: GroupUpdateManyWithoutMembersInput
  likedPosts: PostUpdateManyWithoutLikedByInput
  sharedPosts: PostUpdateManyWithoutSharedByInput
  likedComments: CommentUpdateManyWithoutLikedByInput
}

input UserUpdateInput {
  username: String
  posts: PostUpdateManyWithoutUserInput
  groups: GroupUpdateManyWithoutMembersInput
  likedPosts: PostUpdateManyWithoutLikedByInput
  sharedPosts: PostUpdateManyWithoutSharedByInput
  likedComments: CommentUpdateManyWithoutLikedByInput
}

input UserUpdateManyMutationInput {
  username: String
}

input UserUpdateManyWithoutGroupsInput {
  create: [UserCreateWithoutGroupsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutGroupsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutGroupsInput!]
}

input UserUpdateManyWithoutLikedCommentsInput {
  create: [UserCreateWithoutLikedCommentsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutLikedCommentsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutLikedCommentsInput!]
}

input UserUpdateManyWithoutLikedPostsInput {
  create: [UserCreateWithoutLikedPostsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutLikedPostsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutLikedPostsInput!]
}

input UserUpdateManyWithoutSharedPostsInput {
  create: [UserCreateWithoutSharedPostsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutSharedPostsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutSharedPostsInput!]
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutGroupsDataInput {
  username: String
  posts: PostUpdateManyWithoutUserInput
  likedPosts: PostUpdateManyWithoutLikedByInput
  sharedPosts: PostUpdateManyWithoutSharedByInput
  likedComments: CommentUpdateManyWithoutLikedByInput
}

input UserUpdateWithoutLikedCommentsDataInput {
  username: String
  posts: PostUpdateManyWithoutUserInput
  groups: GroupUpdateManyWithoutMembersInput
  likedPosts: PostUpdateManyWithoutLikedByInput
  sharedPosts: PostUpdateManyWithoutSharedByInput
}

input UserUpdateWithoutLikedPostsDataInput {
  username: String
  posts: PostUpdateManyWithoutUserInput
  groups: GroupUpdateManyWithoutMembersInput
  sharedPosts: PostUpdateManyWithoutSharedByInput
  likedComments: CommentUpdateManyWithoutLikedByInput
}

input UserUpdateWithoutPostsDataInput {
  username: String
  groups: GroupUpdateManyWithoutMembersInput
  likedPosts: PostUpdateManyWithoutLikedByInput
  sharedPosts: PostUpdateManyWithoutSharedByInput
  likedComments: CommentUpdateManyWithoutLikedByInput
}

input UserUpdateWithoutSharedPostsDataInput {
  username: String
  posts: PostUpdateManyWithoutUserInput
  groups: GroupUpdateManyWithoutMembersInput
  likedPosts: PostUpdateManyWithoutLikedByInput
  likedComments: CommentUpdateManyWithoutLikedByInput
}

input UserUpdateWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutGroupsDataInput!
}

input UserUpdateWithWhereUniqueWithoutLikedCommentsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutLikedCommentsDataInput!
}

input UserUpdateWithWhereUniqueWithoutLikedPostsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutLikedPostsDataInput!
}

input UserUpdateWithWhereUniqueWithoutSharedPostsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSharedPostsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutGroupsDataInput!
  create: UserCreateWithoutGroupsInput!
}

input UserUpsertWithWhereUniqueWithoutLikedCommentsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutLikedCommentsDataInput!
  create: UserCreateWithoutLikedCommentsInput!
}

input UserUpsertWithWhereUniqueWithoutLikedPostsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutLikedPostsDataInput!
  create: UserCreateWithoutLikedPostsInput!
}

input UserUpsertWithWhereUniqueWithoutSharedPostsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSharedPostsDataInput!
  create: UserCreateWithoutSharedPostsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  groups_every: GroupWhereInput
  groups_some: GroupWhereInput
  groups_none: GroupWhereInput
  likedPosts_every: PostWhereInput
  likedPosts_some: PostWhereInput
  likedPosts_none: PostWhereInput
  sharedPosts_every: PostWhereInput
  sharedPosts_some: PostWhereInput
  sharedPosts_none: PostWhereInput
  likedComments_every: CommentWhereInput
  likedComments_some: CommentWhereInput
  likedComments_none: CommentWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
}
